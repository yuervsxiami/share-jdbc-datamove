server.port=8010

# 数据源 db0,db1,db2
sharding.jdbc.datasource.names=db0,db1
# 第一个数据库
sharding.jdbc.datasource.db0.type=com.zaxxer.hikari.HikariDataSource
sharding.jdbc.datasource.db0.driver-class-name=com.mysql.cj.jdbc.Driver
sharding.jdbc.datasource.db0.jdbc-url=jdbc:mysql://localhost:3306/db0?useUnicode=true&useJDBCCompliantTimezoneShift=true&useLegacyDatetimeCode=false&serverTimezone=UTC
sharding.jdbc.datasource.db0.username=root
sharding.jdbc.datasource.db0.password=123456

# 第二个数据库
sharding.jdbc.datasource.db1.type=com.zaxxer.hikari.HikariDataSource
sharding.jdbc.datasource.db1.driver-class-name=com.mysql.cj.jdbc.Driver
sharding.jdbc.datasource.db1.jdbc-url=jdbc:mysql://localhost:3307/db0?useUnicode=true&useJDBCCompliantTimezoneShift=true&useLegacyDatetimeCode=false&serverTimezone=UTC
sharding.jdbc.datasource.db1.username=root
sharding.jdbc.datasource.db1.password=123456


# 水平拆分的数据库（表） 配置分库 + 分表策略 行表达式分片策略
# 分库策略
sharding.jdbc.config.sharding.default-database-strategy.inline.sharding-column=id
sharding.jdbc.config.sharding.default-database-strategy.inline.algorithm-expression=db$->{id % 2}

# 分表策略 其中book为逻辑表 分表主要取决于id行
sharding.jdbc.config.sharding.tables.ztkm_kmye.actual-data-nodes=db$->{0..1}.ztkm_kmye_$->{0..1}
sharding.jdbc.config.sharding.tables.ztkm_kmye.table-strategy.inline.sharding-column=ztdm
# 分片算法表达式
sharding.jdbc.config.sharding.tables.ztkm_kmye.table-strategy.inline.algorithm-expression=ztkm_kmye_$->{ztdm % 2}


# 主键 UUID 18位数 如果是分布式还要进行一个设置 防止主键重复
#sharding.jdbc.config.sharding.tables.user.key-generator-column-name=id

# 打印执行的数据库以及语句
#sharding.jdbc.config.props..sql.show=true
spring.main.allow-bean-definition-overriding=true


# kafka
spring.kafka.bootstrap-servers=localhost:9092
kafka.topic=kmye
kafka.partNum=3
kafka.repeatNum=1

#sql.format = {"id":"0","ztdm":"1","zzrq":"2","kjnd":"3","kjqj":"4","lsh":"5","zt":"6","zje":"7","fjs":"8","pzz":"9","ly":"10","bbh":"11","zzr":"12","jlrq":"13","xgr":"14","xgsj":"15","fhr":"16","fhrq":"17","kprq":"18"}
sql.format = {"id":"0","ztdm":"1","kjnd":"2","kjqj":"3","ztkmId":"4","jf":"5","df":"6","delFlag":"7","createTime":"8","createUser":"9","updateTime":"10","updateUser":"11"}

spring.kafka.consumer.group-id=consumer1
spring.kafka.consumer.auto-offset-reset=latest
#spring.kafka.consumer.auto-offset-reset=earliest
spring.kafka.consumer.enable-auto-commit=true
#spring.kafka.consumer.auto-commit-interval=100
# 指定消息key和消息体的编解码方式
spring.kafka.consumer.key-deserializer=org.apache.kafka.common.serialization.StringDeserializer
spring.kafka.consumer.value-deserializer=org.apache.kafka.common.serialization.StringDeserializer

sql.filePath = /Users/zhaozhihui/Documents/test